# Description: detects if a parameter is in $PATH and executable
# Usage: detectex <executable>
# Credit: https://stackoverflow.com/questions/15771773/how-to-define-a-die-shell-function
detectex() {
	local EX=$1
	if [[ -x `which $EX` ]] ; then
		return 0;
	else
		echo "$EX not executable or not in PATH";
		return 1;
	fi
	}

# Description: displays source of a web page
# Usage: pagesource <URL of webpage>
pagesource() {
	detectex lynx
	detectex vimpager
	local URL=$1
	echo $URL | grep ^http || return 1
	lynx -source $URL | vimpager
	}

# Description: check SSL cert info
# Usage: certinfo <host>
certinfo() {
	echo "" | \
	openssl s_client -host $1 -port 443  2>/dev/null | \
	openssl x509 -noout -issuer -subject -dates
	}

# Description: expand a shortened URL
# Usage: expandurl <url>
# Credit: http://pthree.org/2011/10/18/use-wget1-to-expand-shortened-urls/
expandurl() {
	wget -S $1 2>&1 | \
	grep ^Location;
	}

# Description: find which partition a file resides
# Usage: findpart <filename>
findpart() {
	[ -e "$1" ] && df -P "$1" | \
	awk '/^\// {print $1}' || \
	echo "$1 not found";
	}

# Description: flip a table
# Usage: fliptable
# Credit: inspired by @climagic
fliptable() {
	echo "";
	echo "FUCK IT!（╯°□°）╯ ┻━┻";
	}

# Description: extract files from any archive
# Usage: ex <filename>
# Credit: bodhi.zazen
function ex () {
	if [ -f "$1" ] ; then
		case "$1" in
			*.tar) tar xvf $1 ;;
			*.tar.bz2 | *.tbz2 ) tar xjvf $1 ;;
			*.tar.gz | *.tgz ) tar xzvf $1 ;;
			*.bz2) bunzip2 $1 ;;
			*.rar) unrar x $1 ;;
			*.gz) gunzip $1 ;;
			*.zip) unzip $1 ;;
			*.Z) uncompress $1 ;;
			*.7z) 7z x $1 ;;
			*.xz) tar xJvf $1 ;;
			*.deb)
			DIR=${1%%_*.deb}
			ar xv $1
			mkdir ${DIR}
			tar -C ${DIR} -xzvf data.tar.gz
			;;
			*.rpm) rpm2cpio $1 | cpio -vid ;;
			*) echo ""${1}" cannot be extracted via extract()" ;;
		esac
	else
		echo ""${1}" is not a valid file"
	fi
	}

# Description: mount iso image
# Usage: isomount <image>
isomount() {
	isotmp=`mktemp -d --tmpdir` && \
	[ -e "$1" ] && \
	sudo mount -t iso9660 -o loop $1 $isotmp && \
	df -H $isotmp || \
	echo "error mounting iso image $1";
	}

# Description: determines vendor of a IEEE standard MAC address
# Usage: macgrep <MAC address>
macgrep() (
	set -e
	detectex nmap
	local MAC=/usr/share/nmap/nmap-mac-prefixes
	echo -n ""
	grep -i `echo $1 | \
		sed -e 's/[:-]//g' | \
		cut -c 1-6` \
		$MAC || \
	echo "MAC address not found or database not available"
	)

# Description: generates a random IEEE standard MAC address
# Usage: macrand
macrand () (
	set -e
	detectex nmap
	local MAC=/usr/share/nmap/nmap-mac-prefixes
	echo -n ""
	grep -v ^# $MAC | \
	awk '{ print $1 }' | \
	sed 's/^\(..\)\(..\)\(..\).*$/\1:\2:\3/' | \
	shuf -n 1 | tr A-Z a-z | tr '\n' ':' ;
	dd if=/dev/urandom count=1 2>/dev/null | \
	md5sum | \
	sed 's/^\(..\)\(..\)\(..\).*$/\1:\2:\3/'
	)

# Description: lists files in an LXC guest
# Usage: lxc-guest-ls -n <container name> -d <directory>
lxc-guest-ls () {
	while getopts n:d: opt
		do case $opt in
			n) local CONTAINER="$OPTARG";;
			d) local DIR="$OPTARG";;
		esac
	done
	sudo ls /var/lib/lxc/$CONTAINER/rootfs/$DIR
	}

# Description: clear MBR on a device
# Usage: zerombr <device>
#zerombr() { [ -e "$1" ] && dd if=/dev/zero of=$1 bs=512 count=1 || echo "error clearing MBR for $1"; }

# Description: downloads the latest Flash Player MSI
# Usage: flash_update
flash_update () {
	local FLASHPAGE="https://www.adobe.com/special/products/flashplayer/fp_distribution3.html"
	local FLASHDLPREFIX="http://download.macromedia.com/get/flashplayer/current/licensing/win"
	local FLASHVERACTIVEX=$(lynx -source $FLASHPAGE | \
		grep -m1 -A1 "TextH3 LayoutSmallRow" | \
		grep -oE '[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}' | \
		awk ' BEGIN { RS = "" ; FS = "\n" } ;  { print $1 } ')
	local FLASHVERPLUGIN=$(lynx -source $FLASHPAGE | \
		grep -m1 -A1 "TextH3 LayoutSmallRow" | \
		grep -oE '[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}' | \
		awk ' BEGIN { RS = "" ; FS = "\n" } ;  { print $2 } ')
    local OUTDIR="/apps/adobe/flash_player/msi"
    local FLASHMAJORACTIVEX=$(echo $FLASHVERACTIVEX | cut -d . -f 1)
    local FLASHMAJORPLUGIN=$(echo $FLASHVERPLUGIN | cut -d . -f 1)
    wget -O $OUTDIR/install_flash_player_"$FLASHVERACTIVEX"_active_x.msi \
        "$FLASHDLPREFIX"/install_flash_player_"$FLASHMAJORACTIVEX"_active_x.msi
    wget -O $OUTDIR/install_flash_player_"$FLASHVERPLUGIN"_plugin.msi \
        "$FLASHDLPREFIX"/install_flash_player_"$FLASHMAJORPLUGIN"_plugin.msi
    }

# Description: runs a ping sweep
# Usage: pingsweep
pingsweep () {
	detectex fping
	while getopts s: opt
		do case $opt in
			s) local SUBNET="$OPTARG";;
		esac
	done
	[[ -z $SUBNET ]] && \
		echo "no subnet specified. specify one using the -s parameter" && \
		ip -4 addr show | \
			grep inet | \
			awk ' { print $2,$7 } ' | \
			grep -v ^127 | \
			column -t && \
		return 1
	fping -ga $SUBNET 2> /dev/null | \
		sort -g -t \. --key=4
	}

# Description: uses OpenDNS to see if you are dealing with MITM DNS
# Usage: dnscheck
dnscheck () {
	detectex dig
	detectex host
	local NS=$(for i in `seq 1 4` ; do host -4 resolver"$i".opendns.com ; done | sort -R | head -1 | cut -d " " -f 4)
	local RESPONSE=$(dig +short which.opendns.com txt @$NS)
	case $RESPONSE in
		"I am not an OpenDNS resolver.") echo "something fishy is going on";;
		*) echo "nothing to see here";;
	esac
	}

# Description: shows dependencies for packages
# Usage: deps <package>
deps () {
	for p in $@ ; do
		echo -n "$p: " ; apt-cache show $p | \
			grep ^Depends | \
			head -1
	done
	unset p
	}

# Description: shows a concise interface and MAC address listing
# Usage: mymac <interface>
mymac () {
    local INT=$1
    ifconfig $INT | grep HWaddr | awk ' { print $1, $5 } '
    }

# Description: downloads a file from sf.net
# Usage: sfwget <url>
sfwget () {
	local URL=$1
	local FILE=$(echo $URL | cut -d\/ -f 7 | cut -d\? -f 1)
	wget -O $FILE $URL
	}

# Description: displays multiplication table
# Usage: timetables
timetables () {
	local x=$1
	[[ -z $x ]] && \
		echo "please specify table range" && \
		return 0
	for i in {1..$x}; do \
		for j in $(seq 1 $i); do \
			echo -ne $i×$j=$((i*j))\\t; \
		done; \
		echo; \
	done | \
	column -t
	}
